import{q as i,u as n,C as c,aG as m,s as u,eQ as d,aJ as l}from"./main-CxlHa1F_.js";import{d as h}from"./FeatureSet-Cweokupc.js";import{n as y,r as _}from"./FeatureLayerView2D-DvUQH64c.js";import g from"./FeatureFilter-C8X-KGAU.js";import"./preload-helper-ExcqyqRp.js";import"./Field-C2GmeKVE.js";import"./fieldType-BX9AlQiK.js";import"./compilerUtils-DI1xzJ1u.js";import"./Container-Cth9tOaW.js";import"./MapView-oRGQjqWk.js";import"./Cyclical-wh8nJccE.js";import"./CollectionFlattener-Cw-VSlmG.js";import"./workers-CJgJdW1e.js";import"./projection-FRuD2ZA6.js";import"./projectBuffer-CU3KVS3i.js";import"./TileInfo-BthMx3Li.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-pnQtjTZO.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-DpDU_nbh.js";import"./signal-Cdr8tPJH.js";import"./Map-jqoU9D3E.js";import"./Basemap-BuWzYzfr.js";import"./loadAll-D3WdLxvt.js";import"./PortalItem-ik1JSv22.js";import"./writeUtils-_xhLC5uN.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-DzX4DNQr.js";import"./common-DQOJ18NT.js";import"./TablesMixin-BXxShSwQ.js";import"./Layer-DDLV0-Db.js";import"./TimeExtent-XTYgt-Bw.js";import"./GraphicsCollection-DxS0AsqT.js";import"./HeightModelInfo-C3qB2TuM.js";import"./ReactiveMap-GOLPHhiU.js";import"./Query-DQLHe9WY.js";import"./arcgisLayerUrl-DPoTp1MX.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2f64-B7N_6o8F.js";import"./vec2-DGVIkCvT.js";import"./Tile-BL9m9stj.js";import"./TileKey-C91mAd4z.js";import"./QueueProcessor-Bk84n9zj.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-D8WLtzSE.js";import"./normalizeUtilsCommon-_MlC5Fc4.js";import"./utils-Cm_CPrEh.js";import"./utils-CeOFX1H6.js";import"./mat3-XZDRtl20.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Scheduler-C0SR60-w.js";import"./vec32-BOJsoKIk.js";import"./definitions-C0Jy3zs7.js";import"./enums-Dk3osxpS.js";import"./Texture-2A3yLGlJ.js";import"./imageUtils-CanPiQZj.js";import"./capabilities-A2uoe7dc.js";import"./Version-DOW_m9Ks.js";import"./ColorBackground-BJ9v5WR2.js";import"./parser-BR48ds1o.js";import"./featureConversionUtils-ClZh3Htx.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-PozPy24s.js";import"./LayerView-CL8YZYya.js";import"./layerViewUtils-MEdYXIAz.js";import"./TechniqueInstance-BDgPW1IZ.js";import"./UpdateTracking2D-D94f8s59.js";import"./BidiEngine-DNnuvc1i.js";import"./GeometryUtils-CdyIs9Ev.js";import"./enums-CmIX1y88.js";import"./utils-QWndGYJy.js";import"./Rect-CUzevAry.js";import"./LabelMetric-BO_Mu078.js";import"./Program-KOxeYUQ_.js";import"./BufferObject-H-QYxcpo.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BindType-BmZEZMMh.js";import"./Util-C4yWdKVH.js";import"./vec42-CKs01hkn.js";import"./vec4f64-CMoMXWBi.js";import"./TileContainer-Ceqb01_O.js";import"./WGLContainer-DLbqtNiL.js";import"./VertexArrayObject-UItg7L8d.js";import"./ProgramTemplate-BkelemXz.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./FeatureCommandQueue-XyE1TUqm.js";import"./constants-F8oTIn7N.js";import"./lengthUtils-By_dY0He.js";import"./CircularArray-CujHzHWW.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./OrderByInfo-CAXFNhoL.js";import"./labelingInfo-DKu72DiD.js";import"./labelUtils-B-xe5MHn.js";import"./heatmapUtils-NVQ5ClNi.js";import"./SDFHelper-CDOlSl47.js";import"./floatRGBA-B0biIje_.js";import"./HighlightCounter-Czi-fdpx.js";import"./FeatureEffect-BYq58Lwv.js";import"./jsonUtils-C6F4sR9l.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-ClLtIbVr.js";import"./RefreshableLayerView-CtqSVCWe.js";const f=t=>{let e=class extends t{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return i([n()],e.prototype,"_isUserPaused",void 0),i([n({readOnly:!0})],e.prototype,"connectionStatus",null),i([n({type:g})],e.prototype,"filter",void 0),e=i([c("esri.views.layers.StreamLayerView")],e),e};let s=class extends f(_){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async t=>{(await this.getWorker()).streamMessenger.updateCustomParameters(t)}),this.layer.on("send-message-to-socket",async t=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(t)}),this.layer.on("send-message-to-client",async t=>{(await this.getWorker()).streamMessenger.sendMessageToClient(t),this._isUserPaused&&"type"in t&&t.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new u("stream-controller",this.pipelineErrorString):null}on(t,e){if(Array.isArray(t))return d(t.map(o=>this.on(o,e)));const r=["data-received","message-received"].includes(t);r&&this.getWorker().then(o=>o.streamMessenger.enableEvent(t,!0));const a=super.on(t,e),p=this;return l(()=>{a.remove(),r&&(p._workerProxy.closed||p.hasEventListener(t)||p.getWorker().then(o=>o.streamMessenger.enableEvent(t,!1)))})}async queryLatestObservations(t,e){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new u("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return y(r.features.executeQueryForLatestObservations(this._cleanUpQuery(t),e).then(a=>{const p=h.fromJSON(a);return p.features.forEach(o=>{o.layer=this.layer,o.sourceLayer=this.layer}),p}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(t=>t.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(t=>t.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(t=>t.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const t=super._createClientOptions(),e=this;return{...t,get container(){return e.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};i([n()],s.prototype,"pipelineConnectionStatus",void 0),i([n()],s.prototype,"pipelineErrorString",void 0),i([n({readOnly:!0})],s.prototype,"connectionError",null),i([n({readOnly:!0})],s.prototype,"_streamConnectionStatus",null),s=i([c("esri.views.2d.layers.StreamLayerView2D")],s);const fe=s;export{fe as default};
