import{q as i,u as a,C as f,V,dD as b,eQ as F,aJ as U,ej as _,n as x,bv as w}from"./main-CxlHa1F_.js";import{j as H,y as I}from"./LayerView-CL8YZYya.js";import"./preload-helper-ExcqyqRp.js";import"./Container-Cth9tOaW.js";import"./MapView-oRGQjqWk.js";import"./Cyclical-wh8nJccE.js";import"./CollectionFlattener-Cw-VSlmG.js";import"./workers-CJgJdW1e.js";import"./projection-FRuD2ZA6.js";import"./projectBuffer-CU3KVS3i.js";import"./TileInfo-BthMx3Li.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-pnQtjTZO.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-DpDU_nbh.js";import"./signal-Cdr8tPJH.js";import"./Map-jqoU9D3E.js";import"./Basemap-BuWzYzfr.js";import"./loadAll-D3WdLxvt.js";import"./PortalItem-ik1JSv22.js";import"./writeUtils-_xhLC5uN.js";import"./compilerUtils-DI1xzJ1u.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-DzX4DNQr.js";import"./common-DQOJ18NT.js";import"./TablesMixin-BXxShSwQ.js";import"./Layer-DDLV0-Db.js";import"./TimeExtent-XTYgt-Bw.js";import"./GraphicsCollection-DxS0AsqT.js";import"./HeightModelInfo-C3qB2TuM.js";import"./ReactiveMap-GOLPHhiU.js";import"./Query-DQLHe9WY.js";import"./Field-C2GmeKVE.js";import"./fieldType-BX9AlQiK.js";import"./arcgisLayerUrl-DPoTp1MX.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2f64-B7N_6o8F.js";import"./vec2-DGVIkCvT.js";import"./Tile-BL9m9stj.js";import"./TileKey-C91mAd4z.js";import"./QueueProcessor-Bk84n9zj.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-D8WLtzSE.js";import"./normalizeUtilsCommon-_MlC5Fc4.js";import"./utils-Cm_CPrEh.js";import"./utils-CeOFX1H6.js";import"./mat3-XZDRtl20.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Scheduler-C0SR60-w.js";import"./vec32-BOJsoKIk.js";import"./definitions-C0Jy3zs7.js";import"./enums-Dk3osxpS.js";import"./Texture-2A3yLGlJ.js";import"./imageUtils-CanPiQZj.js";import"./capabilities-A2uoe7dc.js";import"./Version-DOW_m9Ks.js";import"./ColorBackground-BJ9v5WR2.js";import"./parser-BR48ds1o.js";import"./layerViewUtils-MEdYXIAz.js";const y=Symbol(),O=n=>{let e=class extends n{constructor(){super(...arguments),this.layerViews=new V,this._debouncedUpdate=b(async()=>{const{layer:r,parent:s}=this,o=s?.footprintLayerView;let p=[];const d=this._createQuery();if(d&&o){const{features:u}=await o.queryFeatures(d);this.suspended||(p=u.map(h=>r.acquireLayer(h)))}this.removeHandles(y),this.addHandles(p,y)})}get creatingLayerViews(){return this.view?.layerViewManager.isCreatingLayerViewsForLayer(this.layer)??!1}isUpdating(){return this.creatingLayerViews||this.layer.updating||this.layerViews.some(r=>r.updating)}enableLayerUpdates(){return F([this._updatingHandles.addWhen(()=>this.parent?.footprintLayerView?.dataUpdating===!1,()=>this.updateLayers()),this._updatingHandles.add(()=>[this.layer.maximumVisibleSublayers,this.layer.parent?.orderBy,this.parent?.footprintLayerView?.filter,this.parent?.footprintLayerView?.timeExtent,this.suspended],()=>this.updateLayers()),U(()=>this.removeHandles(y))])}updateLayers(){this.suspended?this.removeHandles(y):this._updatingHandles.addPromise(_(this._debouncedUpdate()).catch(r=>{x.getLogger(this).error(r)}))}_createQuery(){const r=this.parent?.footprintLayerView,s=this.layer?.parent;if(!r||!s||s.destroyed)return null;const{layer:{maximumVisibleSublayers:o},view:{scale:p}}=this;if(!o)return null;const{itemTypeField:d,itemSourceField:u,itemNameField:h,minScaleField:c,maxScaleField:L,objectIdField:v,orderBy:$}=s,S=w(`${c} IS NULL OR ${p} <= ${c} OR ${c} = 0`,`${L} IS NULL OR ${p} >= ${L}`),m=$?.find(l=>l.field&&!l.valueExpression),t=r.createQuery();if(t.returnGeometry=!1,t.num=o,t.outFields=[v,u,h],t.where=w(t.where,S),this.unsupportedItemTypes!=null){const l=`${d} NOT IN (${this.unsupportedItemTypes.map(C=>`'${C}'`)})`;t.where=w(t.where,l)}return m?.field&&(t.orderByFields=[`${m.field} ${m.order==="descending"?"DESC":"ASC"}`],t.outFields.push(m.field)),t}};return i([a({readOnly:!0})],e.prototype,"creatingLayerViews",null),i([a()],e.prototype,"layer",void 0),i([a()],e.prototype,"layerViews",void 0),i([a({readOnly:!0})],e.prototype,"unsupportedItemTypes",void 0),i([a()],e.prototype,"parent",void 0),i([a({readOnly:!0})],e.prototype,"isUpdating",null),e=i([f("esri.views.layers.CatalogDynamicGroupLayerView")],e),e};let g=class extends O(H(I)){constructor(){super(...arguments),this.unsupportedItemTypes=["Scene Service"],this.layerViews=new V}attach(){this.addAttachHandles([this.layerViews.on("after-changes",()=>this._updateStageChildren()),this.enableLayerUpdates()])}detach(){this.container.removeAllChildren()}update(n){this.updateLayers()}viewChange(){}moveEnd(){this.requestUpdate()}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach((n,e)=>this.container.addChildAt(n.container,e))}};g=i([f("esri.views.2d.layers.CatalogDynamicGroupLayerView2D")],g);const qe=g;export{qe as default};
